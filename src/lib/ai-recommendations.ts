// ============================================
// 12. lib/ai-recommendations.ts - AI Service
// ============================================

import OpenAI from 'openai'

const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
})

export interface StudentPerformanceData {
  studentId: string
  attendanceRate: number
  averageScore: number
  projectsCompleted: number
  skillProficiency: Array<{ skill: string; score: number }>
  strugglingAreas: string[]
  strengths: string[]
}

export interface RecommendationData {
  type: 'RESOURCE' | 'PRACTICE_EXERCISE' | 'INTERVENTION' | 'MENTORSHIP'
  priority: 'LOW' | 'MEDIUM' | 'HIGH' | 'URGENT'
  title: string
  description: string
  actionUrl?: string
}

/**
 * Generates personalized recommendations for a student based on their performance data.
 * The recommendations are generated by an AI model and are returned in an array of objects with the following structure:
 * [
 *   {
 *     "type": "RESOURCE|PRACTICE_EXERCISE|INTERVENTION|MENTORSHIP",
 *     "priority": "LOW|MEDIUM|HIGH|URGENT",
 *     "title": "Short title",
 *     "description": "Detailed description",
 *     "actionUrl": "optional URL to resource"
 *   }
 * ]
 * The AI is instructed to focus on actionable, specific recommendations that address the student's weak areas while leveraging their strengths.
 * The function returns an empty array if there is an error with the AI recommendation generation.
 * @param {StudentPerformanceData} data - student performance data
 * @returns {Promise<RecommendationData[]>} a promise that resolves to an array of recommendations
 */
export async function generateRecommendations(
  data: StudentPerformanceData
): Promise<RecommendationData[]> {
  try {
    const prompt = `
You are an AI educational advisor for a tech academy. Analyze the following student performance data and provide 3-5 personalized recommendations to help them improve.

Student Data:
- Attendance Rate: ${data.attendanceRate}%
- Average Score: ${data.averageScore}%
- Projects Completed: ${data.projectsCompleted}
- Struggling Areas: ${data.strugglingAreas.join(', ')}
- Strengths: ${data.strengths.join(', ')}

Skills Proficiency:
${data.skillProficiency.map(s => `- ${s.skill}: ${s.score}%`).join('\n')}

Provide recommendations in JSON format with the following structure:
[
  {
    "type": "RESOURCE|PRACTICE_EXERCISE|INTERVENTION|MENTORSHIP",
    "priority": "LOW|MEDIUM|HIGH|URGENT",
    "title": "Short title",
    "description": "Detailed description",
    "actionUrl": "optional URL to resource"
  }
]

Focus on actionable, specific recommendations that address their weak areas while leveraging their strengths.
`

    const completion = await openai.chat.completions.create({
      model: 'gpt-4',
      messages: [{ role: 'user', content: prompt }],
      temperature: 0.7,
    })

    const content = completion.choices[0].message.content
    if (!content) return []

    const recommendations = JSON.parse(content)
    return recommendations
  } catch (error) {
    console.error('AI recommendation error:', error)
    return []
  }
}

/**
 * Analyzes a student's skills and suggests the most suitable career path in tech.
 * @param {StudentPerformanceData} data - student performance data
 * @returns {Promise<{ path: string; confidence: number; reasoning: string }>} a promise that resolves to an object containing the suggested career path, confidence level, and a detailed explanation of why this path suits them
 */
export async function suggestCareerPath(
  data: StudentPerformanceData
): Promise<{ path: string; confidence: number; reasoning: string }> {
  try {
    const prompt = `
Analyze this student's skills and suggest the most suitable career path in tech:

Skills Proficiency:
${data.skillProficiency.map(s => `- ${s.skill}: ${s.score}%`).join('\n')}

Strengths: ${data.strengths.join(', ')}
Projects Completed: ${data.projectsCompleted}

Career Paths Available:
- FRONTEND_DEVELOPER
- BACKEND_DEVELOPER
- MOBILE_DEVELOPER
- GAME_DEVELOPER
- AI_ML_ENGINEER
- NETWORK_ENGINEER
- FULLSTACK_DEVELOPER
- DEVOPS_ENGINEER

Respond in JSON format:
{
  "path": "CAREER_PATH_NAME",
  "confidence": 0.85,
  "reasoning": "Detailed explanation of why this path suits them"
}
`

    const completion = await openai.chat.completions.create({
      model: 'gpt-4',
      messages: [{ role: 'user', content: prompt }],
      temperature: 0.7,
    })

    const content = completion.choices[0].message.content
    if (!content) throw new Error('No response from AI')

    return JSON.parse(content)
  } catch (error) {
    console.error('Career suggestion error:', error)
    return {
      path: 'FULLSTACK_DEVELOPER',
      confidence: 0.5,
      reasoning: 'Default suggestion based on comprehensive curriculum',
    }
  }
}