// ============================================
// 2. app/api/recommendations/generate/route.ts
// ============================================

import { NextRequest, NextResponse } from 'next/server'
import { prisma } from '@/lib/prisma'
import { generateRecommendations } from '@/lib/ai-recommendations'

/**
 * Generates personalized recommendations for a student based on their performance data.
 * The recommendations are generated by an AI model and are returned in an array of objects with the following structure:
 * [
 *   {
 *     "type": "RESOURCE|PRACTICE_EXERCISE|INTERVENTION|MENTORSHIP",
 *     "priority": "LOW|MEDIUM|HIGH|URGENT",
 *     "title": "Short title",
 *     "description": "Detailed description",
 *     "actionUrl": "optional URL to resource"
 *   }
 * ]
 * The AI is instructed to focus on actionable, specific recommendations that address the student's weak areas while leveraging their strengths.
 * The function returns an empty array if there is an error with the AI recommendation generation.
 * @param {NextRequest} request - The request object from Next.js
 * @returns {NextResponse} - The response object from Next.js
 * @throws {Error} If there is an error generating the recommendations.
 * @throws {ZodError} If there is a validation error.
 */
export async function POST(request: NextRequest) {
  try {
    const { studentId } = await request.json()

    // Fetch student data
    const student = await prisma.student.findUnique({
      where: { id: studentId },
      include: {
        skillProficiency: true,
        projects: {
          where: { status: 'APPROVED' },
        },
        assessments: {
          include: { assignment: true },
        },
      },
    })

    if (!student) {
      return NextResponse.json(
        { error: 'Student not found' },
        { status: 404 }
      )
    }

    // Calculate attendance rate
    const attendanceCount = await prisma.attendance.count({
      where: { studentId, status: { in: ['PRESENT', 'LATE'] } },
    })

    const totalClasses = await prisma.class.count({
      where: { cohortId: student.cohortId || undefined },
    })

    const attendanceRate = totalClasses > 0
      ? (attendanceCount / totalClasses) * 100
      : 0

    // Calculate average score
    const averageScore = student.assessments.length > 0
      ? student.assessments.reduce((sum, a) => sum + (a.score || 0), 0) / student.assessments.length
      : 0

    // Identify struggling areas (skills below 60%)
    const strugglingAreas = student.skillProficiency
      .filter(s => s.proficiencyScore < 60)
      .map(s => s.skillName)

    // Identify strengths (skills above 80%)
    const strengths = student.skillProficiency
      .filter(s => s.proficiencyScore >= 80)
      .map(s => s.skillName)

    // Generate AI recommendations
    const recommendations = await generateRecommendations({
      studentId,
      attendanceRate,
      averageScore,
      projectsCompleted: student.projects.length,
      skillProficiency: student.skillProficiency.map(s => ({
        skill: s.skillName,
        score: s.proficiencyScore,
      })),
      strugglingAreas,
      strengths,
    })

    // Save recommendations to database
    const savedRecommendations = await Promise.all(
      recommendations.map(rec =>
        prisma.recommendation.create({
          data: {
            studentId,
            type: rec.type as any,
            priority: rec.priority as any,
            title: rec.title,
            description: rec.description,
            actionUrl: rec.actionUrl,
          },
        })
      )
    )

    return NextResponse.json({
      message: 'Recommendations generated successfully',
      recommendations: savedRecommendations,
    })
  } catch (error) {
    console.error('Recommendation generation error:', error)
    return NextResponse.json(
      { error: 'Failed to generate recommendations' },
      { status: 500 }
    )
  }
}
